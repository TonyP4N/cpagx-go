name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      neo4j:
        image: neo4j:5-community
        env:
          NEO4J_AUTH: neo4j/password123
        options: >-
          --health-cmd "cypher-shell -u neo4j -p password123 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7474:7474
          - 7687:7687
      rabbitmq:
        image: rabbitmq:3-management-alpine
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672
      influxdb:
        image: influxdb:2.7-alpine
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: admin
          DOCKER_INFLUXDB_INIT_PASSWORD: password123
          DOCKER_INFLUXDB_INIT_ORG: cpagx
          DOCKER_INFLUXDB_INIT_BUCKET: cpagx_data
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: cpagx-admin-token-2025
        options: >-
          --health-cmd "influx ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 8086:8086
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Download dependencies
        run: go mod download

      - name: Install service clients
        run: |
          echo "Installing service client tools..."
          # 安装Redis客户端
          sudo apt-get update
          sudo apt-get install -y redis-tools
          # 安装Neo4j客户端 (cypher-shell)
          wget -O - https://debian.neo4j.com/neotechnology.gpg.key | sudo gpg --dearmor -o /usr/share/keyrings/neo4j-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/neo4j-archive-keyring.gpg] https://debian.neo4j.com stable latest" | sudo tee /etc/apt/sources.list.d/neo4j.list
          sudo apt-get update
          sudo apt-get install -y cypher-shell
          # 安装InfluxDB客户端
          wget https://dl.influxdata.com/influxdb/releases/influxdb2-client-2.7.1-linux-amd64.tar.gz
          tar xvzf influxdb2-client-2.7.1-linux-amd64.tar.gz
          sudo cp influx /usr/local/bin/
          rm influxdb2-client-2.7.1-linux-amd64.tar.gz

      - name: Run tests
        run: go test -v ./...

      - name: Build
        run: go build ./...

      - name: Vet
        run: go vet ./...

      - name: Format check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run 'gofmt -s -w .'"
            gofmt -s -l .
            exit 1
          fi

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          sleep 30

      - name: Test Redis connection
        run: |
          echo "Testing Redis connection..."
          redis-cli -h localhost -p 6379 ping
          echo "Redis is healthy"

      - name: Test Neo4j connection
        run: |
          echo "Testing Neo4j connection..."
          cypher-shell -u neo4j -p password123 -a localhost:7687 "RETURN 'Neo4j is healthy' as status"
          echo "Neo4j is healthy"

      - name: Test RabbitMQ connection
        run: |
          echo "Testing RabbitMQ connection..."
          curl -s -u guest:guest http://localhost:15672/api/overview >/dev/null
          echo "RabbitMQ is healthy"

      - name: Test InfluxDB connection
        run: |
          echo "Testing InfluxDB connection..."
          influx ping --host http://localhost:8086
          echo "InfluxDB is healthy"

      - name: Test service connectivity
        run: |
          echo "Testing service connectivity..."
          
          # 测试Redis连接
          echo "Testing Redis connectivity..."
          timeout 10s bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done' || exit 1
          
          # 测试Neo4j连接
          echo "Testing Neo4j connectivity..."
          timeout 10s bash -c 'until cypher-shell -u neo4j -p password123 -a localhost:7687 "RETURN 1"; do sleep 1; done' || exit 1
          
          # 测试RabbitMQ连接
          echo "Testing RabbitMQ connectivity..."
          timeout 10s bash -c 'until curl -s -u guest:guest http://localhost:15672/api/overview >/dev/null; do sleep 1; done' || exit 1
          
          # 测试InfluxDB连接
          echo "Testing InfluxDB connectivity..."
          timeout 10s bash -c 'until influx ping --host http://localhost:8086; do sleep 1; done' || exit 1
          
          echo "All services are connected and healthy"

      - name: Test Go application with services
        run: |
          echo "Testing Go application with real services..."
          
          # 设置环境变量
          export REDIS_HOST=localhost
          export REDIS_PORT=6379
          export REDIS_PASSWORD=password123
          export NEO4J_URI=bolt://localhost:7687
          export NEO4J_USER=neo4j
          export NEO4J_PASSWORD=password123
          export RABBITMQ_URL=amqp://guest:guest@localhost:5672/
          export INFLUXDB_URL=http://localhost:8086
          export INFLUXDB_TOKEN=cpagx-admin-token-2025
          
          # 运行一个简单的连接测试
          echo "Running service connection tests..."
          go run cmd/cpagx/main.go --help || true
          
          echo "Go application can start with service configuration" 